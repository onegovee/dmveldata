AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: ingest data

Globals:
  Api:
    OpenApiVersion: 3.0.1
    TracingEnabled: True
    MethodSettings:
      - ResourcePath: "/*"
        HttpMethod: "*"
        MetricsEnabled: True
        LoggingLevel: INFO
        DataTraceEnabled: True

Parameters:
  BucketName:
    Type: String
  RepoUrl:
    Type: String
  RepoParams:
    Type: String
  RepoToken:
    Type: String
    NoEcho: true
  HookAuth:
    Type: String
    NoEcho: true
  MsgAuth:
    Type: String
    NoEcho: true
  SchedulerRuleName:
    Type: String
  AfterFilter:
    Description: Process data AFTER this timestamp. Overrides last processed timestamp.
    Type: String
    Default: ""
    AllowedPattern: '^$|^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$'
    ConstraintDescription: "Must be in the format YYYY-MM-DDTHH:MM:SSZ or leave blank"
  BeforeFilter:
    Description: Process data BEFORE this timestamp.
    Type: String
    Default: ""
    AllowedPattern: '^$|^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$'
    ConstraintDescription: "Must be in the format YYYY-MM-DDTHH:MM:SSZ or leave blank"
  ExportUrl:
    Type: String
  ExportVarName:
    Type: String
  StatusUrl:
    Type: String
  StatusKey:
    Type: String
  StatusMsgFrom:
    Type: String
  StatusMsgTo:
    Type: String

Resources:
  RepoSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Ref RepoToken
  HookSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Ref HookAuth
  MsgSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Ref MsgAuth

  IngestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Ingest
  
  SnsTopic:
    Type: AWS::SNS::Topic

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_authorizer
      Description: not your typical authorizer
      Runtime: python3.12
      Handler: authorizer.lambda_handler
      Timeout: 60
      Layers:
        # https://docs.aws.amazon.com/systems-manager/latest/userguide/ps-integration-lambda-extensions.html#ps-integration-lambda-extensions-add
        - arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension:12
      Environment:
        Variables:
          HOOK_SECRET_ARN: !Ref HookSecret
          INGEST_LAMBDA_ARN: !GetAtt IngestFunction.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: POST
            Path: /
            RestApiId: !Ref IngestApi
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref HookSecret
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt IngestFunction.Arn

  IngestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_ingest
      Description: ingest data
      Runtime: python3.12
      Handler: ingest.lambda_handler
      Timeout: 900
      MemorySize: 512
      Layers:
        # https://docs.aws.amazon.com/systems-manager/latest/userguide/ps-integration-lambda-extensions.html#ps-integration-lambda-extensions-add
        - arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension:12
        # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-Getting-Started-cloudformation.html
        - !Sub arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:53
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId
          BUCKET_NAME: !Ref BucketName
          REPO_URL: !Ref RepoUrl
          REPO_PARAMS: !Ref RepoParams
          REPO_SECRET_ARN: !Ref RepoSecret
          SCHEDULER_RULE_NAME: !Ref SchedulerRuleName
          AFTER_FILTER: !Ref AfterFilter
          BEFORE_FILTER: !Ref BeforeFilter
      Policies:
        - AWSLambdaBasicExecutionRole
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: 2012-10-17
          Statement:
            - Action:
                - secretsmanager:GetSecretValue
              Effect: Allow
              Resource: 
                - !Ref RepoSecret
            - Action:
                - s3:ListBucket
                - s3:GetObject
                - s3:PutObject
              Effect: Allow
              Resource: 
                - !Sub arn:aws:s3:::${BucketName}
                - !Sub arn:aws:s3:::${BucketName}/*
            - Action:
                - events:PutRule
                - events:PutTargets
              Effect: Allow
              Resource:
                - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${SchedulerRuleName}
            - Action:
                - lambda:AddPermission
              Effect: Allow
              Resource:
                - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*

  ExportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_export
      Description: export var
      Runtime: nodejs20.x
      Handler: export.handler
      Timeout: 60
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          EXPORT_URL: !Ref ExportUrl
          EXPORT_VAR_NAME: !Ref ExportVarName
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Action:
                - s3:GetObject
                - s3:PutObject
              Effect: Allow
              Resource: 
                - !Sub arn:aws:s3:::${BucketName}/*
  ExportSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'rate(1 day)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt ExportFunction.Arn
          Id: ExportTarget
  ExportPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ExportFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ExportSchedule.Arn
  ExportErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ExportErrorAlarm
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300 
      EvaluationPeriods: 1
      Threshold: 1 
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ExportFunction
      AlarmActions:
        - !Ref SnsTopic

  StatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_status
      Description: status updates
      Runtime: python3.10
      Handler: status.lambda_handler
      Timeout: 60
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:twilio-layer:2
        # https://docs.aws.amazon.com/systems-manager/latest/userguide/ps-integration-lambda-extensions.html#ps-integration-lambda-extensions-add
        - arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension:12
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          STATUS_URL: !Ref StatusUrl
          STATUS_KEY: !Ref StatusKey
          STATUS_MSG_FROM: !Ref StatusMsgFrom
          STATUS_MSG_TO: !Ref StatusMsgTo
          MSG_SECRET_ARN: !Ref MsgSecret
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Action:
                - s3:ListBucket
                - s3:GetObject
                - s3:PutObject
              Effect: Allow
              Resource: 
                - !Sub arn:aws:s3:::${BucketName}
                - !Sub arn:aws:s3:::${BucketName}/*
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref MsgSecret
  StatusSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'rate(5 minutes)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt StatusFunction.Arn
          Id: StatusTarget
  StatusPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StatusFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StatusSchedule.Arn
  StatusErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: StatusErrorAlarm
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300 
      EvaluationPeriods: 1
      Threshold: 1 
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref StatusFunction
      AlarmActions:
        - !Ref SnsTopic